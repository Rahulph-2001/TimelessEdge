<%- include("../../views/partials/admin/header") %>
<style>
  /* Main Layout */
  .content-main {
    padding: 2rem;
    background-color: #f8f9fa;
  }

  .content-header {
    margin-bottom: 1.5rem;
  }

  .content-title {
    font-size: 1.75rem;
    font-weight: 600;
    color: #212529;
    margin-bottom: 0;
  }

  .card {
    border: none;
    border-radius: 0.75rem;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    background-color: #fff;
    margin-bottom: 2rem;
  }

  .card-body {
    padding: 1.5rem;
  }

  /* Form Styling */
  .col-md-3 {
    padding: 1.5rem;
    background-color: #fff;
    border-radius: 0.75rem;
    box-shadow: 0 0.125rem 0.5rem rgba(0, 0, 0, 0.05);
    margin: 0.5rem;
    transition: all 0.3s ease;
  }

  .col-md-3:hover {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
  }

  .form-label {
    font-weight: 500;
    color: #495057;
    margin-bottom: 0.5rem;
    display: block;
  }

  .form-control {
    width: 100%;
    padding: 0.75rem 1rem;
    margin-bottom: 1rem;
    border: 1px solid #ced4da;
    border-radius: 0.375rem;
    box-sizing: border-box;
    font-size: 0.875rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  }

  .form-control:focus {
    border-color: #80bdff;
    outline: 0;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
  }

  .error-message {
    color: #dc3545;
    font-size: 0.75rem;
    margin-top: -0.5rem;
    margin-bottom: 0.5rem;
  }

  /* Button Styling */
  .d-grid {
    margin-top: 1.5rem;
  }

  .btn {
    font-weight: 500;
    text-align: center;
    vertical-align: middle;
    user-select: none;
    border: 1px solid transparent;
    padding: 0.75rem 1.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: 0.375rem;
    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    cursor: pointer;
  }

  .btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: 0.75rem;
    border-radius: 0.25rem;
  }

  .btn-primary {
    color: #fff;
    background-color: #3b7ddd;
    border-color: #3b7ddd;
  }

  .btn-primary:hover {
    background-color: #2e6ab8;
    border-color: #2c63ac;
  }

  .btn-danger {
    color: #fff;
    background-color: #dc3545;
    border-color: #dc3545;
  }

  .btn-danger:hover {
    background-color: #c82333;
    border-color: #bd2130;
  }

  .btn-success {
    color: #fff;
    background-color: #28a745;
    border-color: #28a745;
  }

  .btn-success:hover {
    background-color: #218838;
    border-color: #1e7e34;
  }

  /* Table Styling */
  .col-md-7 {
    padding: 0.5rem;
  }

  .ml-105 {
    margin-left: 1rem;
  }

  .table-responsive {
    display: block;
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }

  .table {
    width: 100%;
    margin-bottom: 1rem;
    color: #212529;
    border-collapse: collapse;
  }

  .table thead th {
    vertical-align: bottom;
    border-bottom: 2px solid #dee2e6;
    padding: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.75rem;
    letter-spacing: 0.5px;
    color: #6c757d;
  }

  .table tbody td {
    padding: 1rem 0.75rem;
    vertical-align: middle;
    border-top: 1px solid #dee2e6;
    color: #495057;
  }

  .table-hover tbody tr:hover {
    background-color: rgba(0, 0, 0, 0.03);
  }

  .text-start {
    text-align: left;
  }

  .text-center {
    text-align: center;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .content-main {
      padding: 1rem;
    }
    
    .row {
      flex-direction: column;
    }
    
    .col-md-3, .col-md-7 {
      width: 100%;
      margin: 0.5rem 0;
    }
    
    .ml-105 {
      margin-left: 0;
    }
    
    .table-responsive {
      border: 0;
    }
  }
</style>
<section class="content-main">
  <div class="content-header">
    <div>
      <h2 class="content-title card-title">Coupons</h2>
    </div>
  </div>
  <div class="card">
    <div class="card-body">
      <div class="row">
        <div class="col-md-3">
          <form method="post" action="/admin/createCoupon">
            <body onload="setDefaultStartdate()"></body>
              <div class="mb-4">
                <label for="coupon-name" class="form-label">Coupon Name</label>
                <input
                  type="text"
                  id="coupon-name"
                  name="couponName"
                  placeholder="Type here"
                  class="form-control"
                />
                <div id="error-coupon-name" class="error-message"></div>
              </div>

              <div>
                <label for="startingDate" class="form-label">Start Date</label>
                <input
                  type="date"
                  name="startDate"
                  class="form-control"
                  required="true"
                  id="startingDate"
                />
                <div id="error-start-date" class="error-message"></div>
              </div>

              <div>
                <label for="expiringDate" class="form-label">End Date</label>
                <input
                  type="date"
                  name="endDate"
                  class="form-control"
                  id="expiringDate"
                  required="true"
                />
                <div id="error-end-date" class="error-message"></div>
              </div>

              <div>
                <label for="offer-price" class="form-label">Offer Price</label>
                <input
                  type="text"
                  name="offerPrice"
                  placeholder="Type here"
                  class="form-control"
                />
                <div id="error-offer-price" class="error-message"></div>
              </div>

              <div>
                <label for="minimum-price" class="form-label">Minimum Price</label>
                <input
                  type="text"
                  name="minimumPrice"
                  placeholder="Type here"
                  class="form-control"
                />
                <div id="error-minimum-price" class="error-message"></div>
              </div>

              <div class="d-grid">
                <button
                  class="btn btn-primary mt-20"
                  onclick="return validateForm(event)"
                  type="submit"
                >
                  Add Coupon
                </button>
              </div>
              <div id="err-msg" class="error-message"></div>
            </body>
          </form>
        </div>
        <div class="col-md-7 ml-105">
          <div class="table-responsive">
              <table class="table table-hover">
                  <thead>
                      <tr>
                          <th>Name</th>
                          <th>Created On</th>
                          <th>Expire On</th>
                          <th>Offer Price</th>
                          <th>Minimum Price</th>
                          <th>Status</th>
                          <th>Actions</th>
                      </tr>
                  </thead>
                  <tbody>
                     <% if (coupons && coupons.length > 0) { %>
                         <% coupons.forEach((coupon) => { %>
                             <tr>
                                 <td class="text-start"><%= coupon.name %></td>
                                 <td class="text-start"><%= new Date(coupon.createdOn).toLocaleDateString() %></td>
                                 <td class="text-start"><%= new Date(coupon.expireOn).toLocaleDateString() %></td>
                                 <td class="text-start"><%= coupon.offerPrice %></td>
                                 <td class="text-start"><%= coupon.minimumPrice %></td>
                                 <td class="text-start">
                                   <span class="badge <%= coupon.isList ? 'bg-success' : 'bg-danger' %>">
                                     <%= coupon.isList ? "Active" : "Inactive" %>
                                   </span>
                                 </td>
                                 <td class="text-start">
                                     <a href="/admin/editcoupon/<%= coupon._id %>" class="btn btn-primary btn-sm">Edit</a>
                                     <% if (coupon.isList) { %>
                                         <button onclick="blockCoupon('<%= coupon._id %>')" class="btn btn-danger btn-sm">Block</button>
                                     <% } else { %>
                                         <button onclick="unblockCoupon('<%= coupon._id %>')" class="btn btn-success btn-sm">Unblock</button>
                                     <% } %>
                                 </td>
                             </tr>
                         <% }) %>
                     <% } else { %>
                         <tr>
                             <td colspan="7" class="text-center">No Coupons Found</td>
                         </tr>
                     <% } %>
                 </tbody>
              </table>
          </div>
      </div>
      </div>
    </div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
  /* Additional styles for SweetAlert customization */
  .swal2-popup {
    font-size: 0.9rem;
    border-radius: 0.5rem;
  }
  
  .swal2-title {
    font-size: 1.5rem;
    font-weight: 600;
  }
  
  .swal2-confirm, .swal2-cancel {
    font-weight: 500;
    border-radius: 0.375rem;
    padding: 0.5rem 1.5rem;
  }
  
  /* Badge styling */
  .badge {
    display: inline-block;
    padding: 0.35em 0.65em;
    font-size: 0.75em;
    font-weight: 500;
    line-height: 1;
    color: #fff;
    text-align: center;
    white-space: nowrap;
    vertical-align: baseline;
    border-radius: 0.375rem;
  }
  
  .bg-success {
    background-color: #28a745;
  }
  
  .bg-danger {
    background-color: #dc3545;
  }
</style>
<script>
function blockCoupon(couponId) {
    fetch(`/admin/blockcoupon/${couponId}`, {
        method: 'PUT',
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Blocked!',
                text: 'Coupon has been blocked.',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: data.message || 'Failed to block coupon.',
                confirmButtonText: 'OK'
            });
        }
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Something went wrong!',
            confirmButtonText: 'OK'
        });
    });
}

function unblockCoupon(couponId) {
    fetch(`/admin/unblockcoupon/${couponId}`, {
        method: 'PUT',
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Unblocked!',
                text: 'Coupon has been unblocked.',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: data.message || 'Failed to unblock coupon.',
                confirmButtonText: 'OK'
            });
        }
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Something went wrong!',
            confirmButtonText: 'OK'
        });
    });
}


document.addEventListener("DOMContentLoaded", function() {
    const editForm = document.getElementById("editCouponForm");
    if (editForm) {
        editForm.addEventListener("submit", function(event) {
            event.preventDefault();
            
            let formData = new FormData(this);
            let jsonData = {};
            formData.forEach((value, key) => (jsonData[key] = value));
            
            fetch("/admin/updatecoupon", {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(jsonData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    Swal.fire({
                        icon: "success",
                        title: "Success!",
                        text: data.message,
                        confirmButtonText: "OK"
                    }).then(() => {
                        window.location.href = "/admin/coupon";
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Error!",
                        text: data.error || "Something went wrong!",
                        confirmButtonText: "OK"
                    });
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: "error",
                    title: "Error!",
                    text: "Failed to update coupon!",
                    confirmButtonText: "OK"
                });
            });
        });
    }
});

function validateForm(event) {
    event.preventDefault();
    document.querySelectorAll(".error-message").forEach((element) => (element.innerHTML = ""));
    
    const name = document.getElementsByName("couponName")[0].value;
    const sDate = document.getElementsByName("startDate")[0].value;
    const eDate = document.getElementsByName("endDate")[0].value;
    const offerPrice = document.getElementsByName("offerPrice")[0].value.trim();
    const minimumPrice = document.getElementsByName("minimumPrice")[0].value.trim();
    
    const sDateObj = new Date(sDate);
    const eDateObj = new Date(eDate);
    const todayDateObj = new Date();
    todayDateObj.setHours(0, 0, 0, 0);
    
    let errors = [];
    
    const nameRegex = /^[A-Za-z0-9]{1,50}$/;
    if (!nameRegex.test(name)) {
        errors.push("Coupon name must be alphanumeric and 1-50 characters long");
        document.getElementById("error-coupon-name").innerHTML = "Coupon name must be alphanumeric and 1-50 characters long";
    }
    
    if (sDateObj <= todayDateObj) {
        errors.push("Starting date should be greater than or equal to today's date");
        document.getElementById("error-start-date").innerHTML = "Starting date should be greater than or equal to today's date";
    }
    
    if (sDateObj >= eDateObj) {
        errors.push("End date should be after the start date");
        document.getElementById("error-end-date").innerHTML = "End date should be after the start date";
    }
    
    const offerPriceValue = parseFloat(offerPrice);
    const minimumPriceValue = parseFloat(minimumPrice);
    
    if (isNaN(offerPriceValue) || isNaN(minimumPriceValue)) {
        errors.push("Please enter valid numbers for prices");
        document.getElementById("error-offer-price").innerHTML = "Please enter valid numbers for prices";
    } else if (offerPriceValue >= minimumPriceValue) {
        errors.push("Offer price must be less than minimum price");
        document.getElementById("error-offer-price").innerHTML = "Offer price must be less than minimum price";
    }
    
    if (errors.length > 0) {
        return false;
    }
    
    const form = document.querySelector("form");
    const formData = new FormData(form);
    let jsonData = {};
    formData.forEach((value, key) => (jsonData[key] = value));
    
    fetch("/admin/createCoupon", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(jsonData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
  
            Swal.fire({
                icon: "success",
                title: "Success!",
                text: data.message || "Coupon created successfully!",
                confirmButtonText: "OK"
            }).then(() => {
                window.location.href = "/admin/coupon";
            });
        } else {
            Swal.fire({
                icon: "error",
                title: "Error!",
                text: data.message || "Failed to create coupon!",
                confirmButtonText: "OK"
            });
        }
    })
    .catch(error => {
        console.error("Error:", error);
        Swal.fire({
            icon: "error",
            title: "Error!",
            text: "Something went wrong!",
            confirmButtonText: "OK"
        });
    });
    
    return false;
}

// function setDefaultStartdate() {
//     const today = new Date();
//     const year = today.getFullYear();
//     const month = (today.getMonth() + 1).toString().padStart(2, "0");
//     const day = today.getDate().toString().padStart(2, "0");
//     document.getElementById("startingDate").value = `${year}-${month}-${day}`;
// }

// document.addEventListener("DOMContentLoaded", function() {
//     setDefaultStartdate();
// });
</script>
<%- include("../../views/partials/admin/footer") %>